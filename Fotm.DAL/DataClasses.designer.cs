#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fotm.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="fotm")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCharacter(Character instance);
    partial void UpdateCharacter(Character instance);
    partial void DeleteCharacter(Character instance);
    partial void Insertwebpages_UsersInRole(webpages_UsersInRole instance);
    partial void Updatewebpages_UsersInRole(webpages_UsersInRole instance);
    partial void Deletewebpages_UsersInRole(webpages_UsersInRole instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertFaction(Faction instance);
    partial void UpdateFaction(Faction instance);
    partial void DeleteFaction(Faction instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertPvpStat(PvpStat instance);
    partial void UpdatePvpStat(PvpStat instance);
    partial void DeletePvpStat(PvpStat instance);
    partial void InsertRace(Race instance);
    partial void UpdateRace(Race instance);
    partial void DeleteRace(Race instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertTeamMember(TeamMember instance);
    partial void UpdateTeamMember(TeamMember instance);
    partial void DeleteTeamMember(TeamMember instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void Insertwebpages_Membership(webpages_Membership instance);
    partial void Updatewebpages_Membership(webpages_Membership instance);
    partial void Deletewebpages_Membership(webpages_Membership instance);
    partial void Insertwebpages_OAuthMembership(webpages_OAuthMembership instance);
    partial void Updatewebpages_OAuthMembership(webpages_OAuthMembership instance);
    partial void Deletewebpages_OAuthMembership(webpages_OAuthMembership instance);
    partial void Insertwebpages_Role(webpages_Role instance);
    partial void Updatewebpages_Role(webpages_Role instance);
    partial void Deletewebpages_Role(webpages_Role instance);
    partial void InsertRealm(Realm instance);
    partial void UpdateRealm(Realm instance);
    partial void DeleteRealm(Realm instance);
    partial void InsertSpec(Spec instance);
    partial void UpdateSpec(Spec instance);
    partial void DeleteSpec(Spec instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::Fotm.DAL.Properties.Settings.Default.fotmConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Character> Characters
		{
			get
			{
				return this.GetTable<Character>();
			}
		}
		
		public System.Data.Linq.Table<webpages_UsersInRole> webpages_UsersInRoles
		{
			get
			{
				return this.GetTable<webpages_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Faction> Factions
		{
			get
			{
				return this.GetTable<Faction>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<PvpStat> PvpStats
		{
			get
			{
				return this.GetTable<PvpStat>();
			}
		}
		
		public System.Data.Linq.Table<Race> Races
		{
			get
			{
				return this.GetTable<Race>();
			}
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<TeamMember> TeamMembers
		{
			get
			{
				return this.GetTable<TeamMember>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<webpages_Membership> webpages_Memberships
		{
			get
			{
				return this.GetTable<webpages_Membership>();
			}
		}
		
		public System.Data.Linq.Table<webpages_OAuthMembership> webpages_OAuthMemberships
		{
			get
			{
				return this.GetTable<webpages_OAuthMembership>();
			}
		}
		
		public System.Data.Linq.Table<webpages_Role> webpages_Roles
		{
			get
			{
				return this.GetTable<webpages_Role>();
			}
		}
		
		public System.Data.Linq.Table<Realm> Realms
		{
			get
			{
				return this.GetTable<Realm>();
			}
		}
		
		public System.Data.Linq.Table<Spec> Specs
		{
			get
			{
				return this.GetTable<Spec>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_GetAllTeamsByClassCompositionThenOrderThemByMostPopular")]
		public ISingleResult<SP_GetAllTeamsByClassCompositionThenOrderThemByMostPopularResult> SP_GetAllTeamsByClassCompositionThenOrderThemByMostPopular([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Bracket", DbType="NVarChar(50)")] string bracket, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegionID", DbType="Int")] System.Nullable<int> regionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactionID", DbType="Int")] System.Nullable<int> factionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bracket, regionID, factionID);
			return ((ISingleResult<SP_GetAllTeamsByClassCompositionThenOrderThemByMostPopularResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Character")]
	public partial class Character : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CharacterID;
		
		private string _Name;
		
		private int _RealmID;
		
		private int _SpecID;
		
		private int _RaceID;
		
		private int _ClassID;
		
		private bool _FactionID;
		
		private bool _GenderID;
		
		private int _SeasonWins;
		
		private int _SeasonLosses;
		
		private int _WeeklyWins;
		
		private int _WeeklyLosses;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedStatus;
		
		private long _ModifiedUserID;
		
		private EntitySet<PvpStat> _PvpStats;
		
		private EntitySet<TeamMember> _TeamMembers;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Faction> _Faction;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<Race> _Race;
		
		private EntityRef<Realm> _Realm;
		
		private EntityRef<Spec> _Spec;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCharacterIDChanging(long value);
    partial void OnCharacterIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRealmIDChanging(int value);
    partial void OnRealmIDChanged();
    partial void OnSpecIDChanging(int value);
    partial void OnSpecIDChanged();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnFactionIDChanging(bool value);
    partial void OnFactionIDChanged();
    partial void OnGenderIDChanging(bool value);
    partial void OnGenderIDChanged();
    partial void OnSeasonWinsChanging(int value);
    partial void OnSeasonWinsChanged();
    partial void OnSeasonLossesChanging(int value);
    partial void OnSeasonLossesChanged();
    partial void OnWeeklyWinsChanging(int value);
    partial void OnWeeklyWinsChanged();
    partial void OnWeeklyLossesChanging(int value);
    partial void OnWeeklyLossesChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedStatusChanging(string value);
    partial void OnModifiedStatusChanged();
    partial void OnModifiedUserIDChanging(long value);
    partial void OnModifiedUserIDChanged();
    #endregion
		
		public Character()
		{
			this._PvpStats = new EntitySet<PvpStat>(new Action<PvpStat>(this.attach_PvpStats), new Action<PvpStat>(this.detach_PvpStats));
			this._TeamMembers = new EntitySet<TeamMember>(new Action<TeamMember>(this.attach_TeamMembers), new Action<TeamMember>(this.detach_TeamMembers));
			this._Class = default(EntityRef<Class>);
			this._Faction = default(EntityRef<Faction>);
			this._Gender = default(EntityRef<Gender>);
			this._Race = default(EntityRef<Race>);
			this._Realm = default(EntityRef<Realm>);
			this._Spec = default(EntityRef<Spec>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealmID", DbType="Int NOT NULL")]
		public int RealmID
		{
			get
			{
				return this._RealmID;
			}
			set
			{
				if ((this._RealmID != value))
				{
					if (this._Realm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealmIDChanging(value);
					this.SendPropertyChanging();
					this._RealmID = value;
					this.SendPropertyChanged("RealmID");
					this.OnRealmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecID", DbType="Int NOT NULL")]
		public int SpecID
		{
			get
			{
				return this._SpecID;
			}
			set
			{
				if ((this._SpecID != value))
				{
					if (this._Spec.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecIDChanging(value);
					this.SendPropertyChanging();
					this._SpecID = value;
					this.SendPropertyChanged("SpecID");
					this.OnSpecIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", DbType="Int NOT NULL")]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					if (this._Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactionID", DbType="Bit NOT NULL")]
		public bool FactionID
		{
			get
			{
				return this._FactionID;
			}
			set
			{
				if ((this._FactionID != value))
				{
					if (this._Faction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactionIDChanging(value);
					this.SendPropertyChanging();
					this._FactionID = value;
					this.SendPropertyChanged("FactionID");
					this.OnFactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderID", DbType="Bit NOT NULL")]
		public bool GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonWins", DbType="Int NOT NULL")]
		public int SeasonWins
		{
			get
			{
				return this._SeasonWins;
			}
			set
			{
				if ((this._SeasonWins != value))
				{
					this.OnSeasonWinsChanging(value);
					this.SendPropertyChanging();
					this._SeasonWins = value;
					this.SendPropertyChanged("SeasonWins");
					this.OnSeasonWinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonLosses", DbType="Int NOT NULL")]
		public int SeasonLosses
		{
			get
			{
				return this._SeasonLosses;
			}
			set
			{
				if ((this._SeasonLosses != value))
				{
					this.OnSeasonLossesChanging(value);
					this.SendPropertyChanging();
					this._SeasonLosses = value;
					this.SendPropertyChanged("SeasonLosses");
					this.OnSeasonLossesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeeklyWins", DbType="Int NOT NULL")]
		public int WeeklyWins
		{
			get
			{
				return this._WeeklyWins;
			}
			set
			{
				if ((this._WeeklyWins != value))
				{
					this.OnWeeklyWinsChanging(value);
					this.SendPropertyChanging();
					this._WeeklyWins = value;
					this.SendPropertyChanged("WeeklyWins");
					this.OnWeeklyWinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeeklyLosses", DbType="Int NOT NULL")]
		public int WeeklyLosses
		{
			get
			{
				return this._WeeklyLosses;
			}
			set
			{
				if ((this._WeeklyLosses != value))
				{
					this.OnWeeklyLossesChanging(value);
					this.SendPropertyChanging();
					this._WeeklyLosses = value;
					this.SendPropertyChanged("WeeklyLosses");
					this.OnWeeklyLossesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedStatus", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ModifiedStatus
		{
			get
			{
				return this._ModifiedStatus;
			}
			set
			{
				if ((this._ModifiedStatus != value))
				{
					this.OnModifiedStatusChanging(value);
					this.SendPropertyChanging();
					this._ModifiedStatus = value;
					this.SendPropertyChanged("ModifiedStatus");
					this.OnModifiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUserID", DbType="BigInt NOT NULL")]
		public long ModifiedUserID
		{
			get
			{
				return this._ModifiedUserID;
			}
			set
			{
				if ((this._ModifiedUserID != value))
				{
					this.OnModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUserID = value;
					this.SendPropertyChanged("ModifiedUserID");
					this.OnModifiedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_PvpStat", Storage="_PvpStats", ThisKey="CharacterID", OtherKey="CharacterID")]
		public EntitySet<PvpStat> PvpStats
		{
			get
			{
				return this._PvpStats;
			}
			set
			{
				this._PvpStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_TeamMember", Storage="_TeamMembers", ThisKey="CharacterID", OtherKey="CharacterID")]
		public EntitySet<TeamMember> TeamMembers
		{
			get
			{
				return this._TeamMembers;
			}
			set
			{
				this._TeamMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Character", Storage="_Class", ThisKey="ClassID", OtherKey="ClassID", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Characters.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Characters.Add(this);
						this._ClassID = value.ClassID;
					}
					else
					{
						this._ClassID = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faction_Character", Storage="_Faction", ThisKey="FactionID", OtherKey="FactionID", IsForeignKey=true)]
		public Faction Faction
		{
			get
			{
				return this._Faction.Entity;
			}
			set
			{
				Faction previousValue = this._Faction.Entity;
				if (((previousValue != value) 
							|| (this._Faction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faction.Entity = null;
						previousValue.Characters.Remove(this);
					}
					this._Faction.Entity = value;
					if ((value != null))
					{
						value.Characters.Add(this);
						this._FactionID = value.FactionID;
					}
					else
					{
						this._FactionID = default(bool);
					}
					this.SendPropertyChanged("Faction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Character", Storage="_Gender", ThisKey="GenderID", OtherKey="GenderID", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.Characters.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.Characters.Add(this);
						this._GenderID = value.GenderID;
					}
					else
					{
						this._GenderID = default(bool);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Race_Character", Storage="_Race", ThisKey="RaceID", OtherKey="RaceID", IsForeignKey=true)]
		public Race Race
		{
			get
			{
				return this._Race.Entity;
			}
			set
			{
				Race previousValue = this._Race.Entity;
				if (((previousValue != value) 
							|| (this._Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Race.Entity = null;
						previousValue.Characters.Remove(this);
					}
					this._Race.Entity = value;
					if ((value != null))
					{
						value.Characters.Add(this);
						this._RaceID = value.RaceID;
					}
					else
					{
						this._RaceID = default(int);
					}
					this.SendPropertyChanged("Race");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Realm_Character", Storage="_Realm", ThisKey="RealmID", OtherKey="RealmID", IsForeignKey=true)]
		public Realm Realm
		{
			get
			{
				return this._Realm.Entity;
			}
			set
			{
				Realm previousValue = this._Realm.Entity;
				if (((previousValue != value) 
							|| (this._Realm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Realm.Entity = null;
						previousValue.Characters.Remove(this);
					}
					this._Realm.Entity = value;
					if ((value != null))
					{
						value.Characters.Add(this);
						this._RealmID = value.RealmID;
					}
					else
					{
						this._RealmID = default(int);
					}
					this.SendPropertyChanged("Realm");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Spec_Character", Storage="_Spec", ThisKey="SpecID", OtherKey="SpecID", IsForeignKey=true)]
		public Spec Spec
		{
			get
			{
				return this._Spec.Entity;
			}
			set
			{
				Spec previousValue = this._Spec.Entity;
				if (((previousValue != value) 
							|| (this._Spec.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Spec.Entity = null;
						previousValue.Characters.Remove(this);
					}
					this._Spec.Entity = value;
					if ((value != null))
					{
						value.Characters.Add(this);
						this._SpecID = value.SpecID;
					}
					else
					{
						this._SpecID = default(int);
					}
					this.SendPropertyChanged("Spec");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PvpStats(PvpStat entity)
		{
			this.SendPropertyChanging();
			entity.Character = this;
		}
		
		private void detach_PvpStats(PvpStat entity)
		{
			this.SendPropertyChanging();
			entity.Character = null;
		}
		
		private void attach_TeamMembers(TeamMember entity)
		{
			this.SendPropertyChanging();
			entity.Character = this;
		}
		
		private void detach_TeamMembers(TeamMember entity)
		{
			this.SendPropertyChanging();
			entity.Character = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_UsersInRoles")]
	public partial class webpages_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _RoleId;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<webpages_Role> _webpages_Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public webpages_UsersInRole()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			this._webpages_Role = default(EntityRef<webpages_Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._webpages_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_webpages_UsersInRole", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.webpages_UsersInRoles.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.webpages_UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="webpages_Role_webpages_UsersInRole", Storage="_webpages_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public webpages_Role webpages_Role
		{
			get
			{
				return this._webpages_Role.Entity;
			}
			set
			{
				webpages_Role previousValue = this._webpages_Role.Entity;
				if (((previousValue != value) 
							|| (this._webpages_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._webpages_Role.Entity = null;
						previousValue.webpages_UsersInRoles.Remove(this);
					}
					this._webpages_Role.Entity = value;
					if ((value != null))
					{
						value.webpages_UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("webpages_Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassID;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedStatus;
		
		private long _ModifiedUserID;
		
		private EntitySet<Character> _Characters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedStatusChanging(string value);
    partial void OnModifiedStatusChanged();
    partial void OnModifiedUserIDChanging(long value);
    partial void OnModifiedUserIDChanged();
    #endregion
		
		public Class()
		{
			this._Characters = new EntitySet<Character>(new Action<Character>(this.attach_Characters), new Action<Character>(this.detach_Characters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedStatus", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ModifiedStatus
		{
			get
			{
				return this._ModifiedStatus;
			}
			set
			{
				if ((this._ModifiedStatus != value))
				{
					this.OnModifiedStatusChanging(value);
					this.SendPropertyChanging();
					this._ModifiedStatus = value;
					this.SendPropertyChanged("ModifiedStatus");
					this.OnModifiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUserID", DbType="BigInt NOT NULL")]
		public long ModifiedUserID
		{
			get
			{
				return this._ModifiedUserID;
			}
			set
			{
				if ((this._ModifiedUserID != value))
				{
					this.OnModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUserID = value;
					this.SendPropertyChanged("ModifiedUserID");
					this.OnModifiedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Character", Storage="_Characters", ThisKey="ClassID", OtherKey="ClassID")]
		public EntitySet<Character> Characters
		{
			get
			{
				return this._Characters;
			}
			set
			{
				this._Characters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faction")]
	public partial class Faction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private bool _FactionID;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedStatus;
		
		private long _ModifiedUserID;
		
		private EntitySet<Character> _Characters;
		
		private EntitySet<TeamMember> _TeamMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactionIDChanging(bool value);
    partial void OnFactionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedStatusChanging(string value);
    partial void OnModifiedStatusChanged();
    partial void OnModifiedUserIDChanging(long value);
    partial void OnModifiedUserIDChanged();
    #endregion
		
		public Faction()
		{
			this._Characters = new EntitySet<Character>(new Action<Character>(this.attach_Characters), new Action<Character>(this.detach_Characters));
			this._TeamMembers = new EntitySet<TeamMember>(new Action<TeamMember>(this.attach_TeamMembers), new Action<TeamMember>(this.detach_TeamMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactionID", DbType="Bit NOT NULL", IsPrimaryKey=true)]
		public bool FactionID
		{
			get
			{
				return this._FactionID;
			}
			set
			{
				if ((this._FactionID != value))
				{
					this.OnFactionIDChanging(value);
					this.SendPropertyChanging();
					this._FactionID = value;
					this.SendPropertyChanged("FactionID");
					this.OnFactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedStatus", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ModifiedStatus
		{
			get
			{
				return this._ModifiedStatus;
			}
			set
			{
				if ((this._ModifiedStatus != value))
				{
					this.OnModifiedStatusChanging(value);
					this.SendPropertyChanging();
					this._ModifiedStatus = value;
					this.SendPropertyChanged("ModifiedStatus");
					this.OnModifiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUserID", DbType="BigInt NOT NULL")]
		public long ModifiedUserID
		{
			get
			{
				return this._ModifiedUserID;
			}
			set
			{
				if ((this._ModifiedUserID != value))
				{
					this.OnModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUserID = value;
					this.SendPropertyChanged("ModifiedUserID");
					this.OnModifiedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faction_Character", Storage="_Characters", ThisKey="FactionID", OtherKey="FactionID")]
		public EntitySet<Character> Characters
		{
			get
			{
				return this._Characters;
			}
			set
			{
				this._Characters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faction_TeamMember", Storage="_TeamMembers", ThisKey="FactionID", OtherKey="FactionID")]
		public EntitySet<TeamMember> TeamMembers
		{
			get
			{
				return this._TeamMembers;
			}
			set
			{
				this._TeamMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Faction = this;
		}
		
		private void detach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Faction = null;
		}
		
		private void attach_TeamMembers(TeamMember entity)
		{
			this.SendPropertyChanging();
			entity.Faction = this;
		}
		
		private void detach_TeamMembers(TeamMember entity)
		{
			this.SendPropertyChanging();
			entity.Faction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private bool _GenderID;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedStatus;
		
		private long _ModifiedUserID;
		
		private EntitySet<Character> _Characters;
		
		private EntitySet<TeamMember> _TeamMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenderIDChanging(bool value);
    partial void OnGenderIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedStatusChanging(string value);
    partial void OnModifiedStatusChanged();
    partial void OnModifiedUserIDChanging(long value);
    partial void OnModifiedUserIDChanged();
    #endregion
		
		public Gender()
		{
			this._Characters = new EntitySet<Character>(new Action<Character>(this.attach_Characters), new Action<Character>(this.detach_Characters));
			this._TeamMembers = new EntitySet<TeamMember>(new Action<TeamMember>(this.attach_TeamMembers), new Action<TeamMember>(this.detach_TeamMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderID", DbType="Bit NOT NULL", IsPrimaryKey=true)]
		public bool GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedStatus", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ModifiedStatus
		{
			get
			{
				return this._ModifiedStatus;
			}
			set
			{
				if ((this._ModifiedStatus != value))
				{
					this.OnModifiedStatusChanging(value);
					this.SendPropertyChanging();
					this._ModifiedStatus = value;
					this.SendPropertyChanged("ModifiedStatus");
					this.OnModifiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUserID", DbType="BigInt NOT NULL")]
		public long ModifiedUserID
		{
			get
			{
				return this._ModifiedUserID;
			}
			set
			{
				if ((this._ModifiedUserID != value))
				{
					this.OnModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUserID = value;
					this.SendPropertyChanged("ModifiedUserID");
					this.OnModifiedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Character", Storage="_Characters", ThisKey="GenderID", OtherKey="GenderID")]
		public EntitySet<Character> Characters
		{
			get
			{
				return this._Characters;
			}
			set
			{
				this._Characters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_TeamMember", Storage="_TeamMembers", ThisKey="GenderID", OtherKey="GenderID")]
		public EntitySet<TeamMember> TeamMembers
		{
			get
			{
				return this._TeamMembers;
			}
			set
			{
				this._TeamMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
		
		private void attach_TeamMembers(TeamMember entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_TeamMembers(TeamMember entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PvpStats")]
	public partial class PvpStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PvpStatsID;
		
		private int _Ranking;
		
		private int _Rating;
		
		private long _CharacterID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedStatus;
		
		private long _ModifiedUserID;
		
		private EntityRef<Character> _Character;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPvpStatsIDChanging(long value);
    partial void OnPvpStatsIDChanged();
    partial void OnRankingChanging(int value);
    partial void OnRankingChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnCharacterIDChanging(long value);
    partial void OnCharacterIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedStatusChanging(string value);
    partial void OnModifiedStatusChanged();
    partial void OnModifiedUserIDChanging(long value);
    partial void OnModifiedUserIDChanged();
    #endregion
		
		public PvpStat()
		{
			this._Character = default(EntityRef<Character>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PvpStatsID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PvpStatsID
		{
			get
			{
				return this._PvpStatsID;
			}
			set
			{
				if ((this._PvpStatsID != value))
				{
					this.OnPvpStatsIDChanging(value);
					this.SendPropertyChanging();
					this._PvpStatsID = value;
					this.SendPropertyChanged("PvpStatsID");
					this.OnPvpStatsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ranking", DbType="Int NOT NULL")]
		public int Ranking
		{
			get
			{
				return this._Ranking;
			}
			set
			{
				if ((this._Ranking != value))
				{
					this.OnRankingChanging(value);
					this.SendPropertyChanging();
					this._Ranking = value;
					this.SendPropertyChanged("Ranking");
					this.OnRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterID", DbType="BigInt NOT NULL")]
		public long CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					if (this._Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedStatus", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ModifiedStatus
		{
			get
			{
				return this._ModifiedStatus;
			}
			set
			{
				if ((this._ModifiedStatus != value))
				{
					this.OnModifiedStatusChanging(value);
					this.SendPropertyChanging();
					this._ModifiedStatus = value;
					this.SendPropertyChanged("ModifiedStatus");
					this.OnModifiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUserID", DbType="BigInt NOT NULL")]
		public long ModifiedUserID
		{
			get
			{
				return this._ModifiedUserID;
			}
			set
			{
				if ((this._ModifiedUserID != value))
				{
					this.OnModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUserID = value;
					this.SendPropertyChanged("ModifiedUserID");
					this.OnModifiedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_PvpStat", Storage="_Character", ThisKey="CharacterID", OtherKey="CharacterID", IsForeignKey=true)]
		public Character Character
		{
			get
			{
				return this._Character.Entity;
			}
			set
			{
				Character previousValue = this._Character.Entity;
				if (((previousValue != value) 
							|| (this._Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character.Entity = null;
						previousValue.PvpStats.Remove(this);
					}
					this._Character.Entity = value;
					if ((value != null))
					{
						value.PvpStats.Add(this);
						this._CharacterID = value.CharacterID;
					}
					else
					{
						this._CharacterID = default(long);
					}
					this.SendPropertyChanged("Character");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Race")]
	public partial class Race : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaceID;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedStatus;
		
		private long _ModifiedUserID;
		
		private EntitySet<Character> _Characters;
		
		private EntitySet<TeamMember> _TeamMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedStatusChanging(string value);
    partial void OnModifiedStatusChanged();
    partial void OnModifiedUserIDChanging(long value);
    partial void OnModifiedUserIDChanged();
    #endregion
		
		public Race()
		{
			this._Characters = new EntitySet<Character>(new Action<Character>(this.attach_Characters), new Action<Character>(this.detach_Characters));
			this._TeamMembers = new EntitySet<TeamMember>(new Action<TeamMember>(this.attach_TeamMembers), new Action<TeamMember>(this.detach_TeamMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedStatus", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ModifiedStatus
		{
			get
			{
				return this._ModifiedStatus;
			}
			set
			{
				if ((this._ModifiedStatus != value))
				{
					this.OnModifiedStatusChanging(value);
					this.SendPropertyChanging();
					this._ModifiedStatus = value;
					this.SendPropertyChanged("ModifiedStatus");
					this.OnModifiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUserID", DbType="BigInt NOT NULL")]
		public long ModifiedUserID
		{
			get
			{
				return this._ModifiedUserID;
			}
			set
			{
				if ((this._ModifiedUserID != value))
				{
					this.OnModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUserID = value;
					this.SendPropertyChanged("ModifiedUserID");
					this.OnModifiedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Race_Character", Storage="_Characters", ThisKey="RaceID", OtherKey="RaceID")]
		public EntitySet<Character> Characters
		{
			get
			{
				return this._Characters;
			}
			set
			{
				this._Characters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Race_TeamMember", Storage="_TeamMembers", ThisKey="RaceID", OtherKey="RaceID")]
		public EntitySet<TeamMember> TeamMembers
		{
			get
			{
				return this._TeamMembers;
			}
			set
			{
				this._TeamMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Race = this;
		}
		
		private void detach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Race = null;
		}
		
		private void attach_TeamMembers(TeamMember entity)
		{
			this.SendPropertyChanging();
			entity.Race = this;
		}
		
		private void detach_TeamMembers(TeamMember entity)
		{
			this.SendPropertyChanging();
			entity.Race = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegionID;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedStatus;
		
		private long _ModifiedUserID;
		
		private EntitySet<Realm> _Realms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedStatusChanging(string value);
    partial void OnModifiedStatusChanged();
    partial void OnModifiedUserIDChanging(long value);
    partial void OnModifiedUserIDChanged();
    #endregion
		
		public Region()
		{
			this._Realms = new EntitySet<Realm>(new Action<Realm>(this.attach_Realms), new Action<Realm>(this.detach_Realms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedStatus", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ModifiedStatus
		{
			get
			{
				return this._ModifiedStatus;
			}
			set
			{
				if ((this._ModifiedStatus != value))
				{
					this.OnModifiedStatusChanging(value);
					this.SendPropertyChanging();
					this._ModifiedStatus = value;
					this.SendPropertyChanged("ModifiedStatus");
					this.OnModifiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUserID", DbType="BigInt NOT NULL")]
		public long ModifiedUserID
		{
			get
			{
				return this._ModifiedUserID;
			}
			set
			{
				if ((this._ModifiedUserID != value))
				{
					this.OnModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUserID = value;
					this.SendPropertyChanged("ModifiedUserID");
					this.OnModifiedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Realm", Storage="_Realms", ThisKey="RegionID", OtherKey="RegionID")]
		public EntitySet<Realm> Realms
		{
			get
			{
				return this._Realms;
			}
			set
			{
				this._Realms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Realms(Realm entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_Realms(Realm entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TeamID;
		
		private string _Bracket;
		
		private double _MeanRatingChange;
		
		private double _MeanRating;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedStatus;
		
		private long _ModifiedUserID;
		
		private EntitySet<TeamMember> _TeamMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(long value);
    partial void OnTeamIDChanged();
    partial void OnBracketChanging(string value);
    partial void OnBracketChanged();
    partial void OnMeanRatingChangeChanging(double value);
    partial void OnMeanRatingChangeChanged();
    partial void OnMeanRatingChanging(double value);
    partial void OnMeanRatingChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedStatusChanging(string value);
    partial void OnModifiedStatusChanged();
    partial void OnModifiedUserIDChanging(long value);
    partial void OnModifiedUserIDChanged();
    #endregion
		
		public Team()
		{
			this._TeamMembers = new EntitySet<TeamMember>(new Action<TeamMember>(this.attach_TeamMembers), new Action<TeamMember>(this.detach_TeamMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bracket", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Bracket
		{
			get
			{
				return this._Bracket;
			}
			set
			{
				if ((this._Bracket != value))
				{
					this.OnBracketChanging(value);
					this.SendPropertyChanging();
					this._Bracket = value;
					this.SendPropertyChanged("Bracket");
					this.OnBracketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeanRatingChange", DbType="Float NOT NULL")]
		public double MeanRatingChange
		{
			get
			{
				return this._MeanRatingChange;
			}
			set
			{
				if ((this._MeanRatingChange != value))
				{
					this.OnMeanRatingChangeChanging(value);
					this.SendPropertyChanging();
					this._MeanRatingChange = value;
					this.SendPropertyChanged("MeanRatingChange");
					this.OnMeanRatingChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeanRating", DbType="Float NOT NULL")]
		public double MeanRating
		{
			get
			{
				return this._MeanRating;
			}
			set
			{
				if ((this._MeanRating != value))
				{
					this.OnMeanRatingChanging(value);
					this.SendPropertyChanging();
					this._MeanRating = value;
					this.SendPropertyChanged("MeanRating");
					this.OnMeanRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedStatus", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ModifiedStatus
		{
			get
			{
				return this._ModifiedStatus;
			}
			set
			{
				if ((this._ModifiedStatus != value))
				{
					this.OnModifiedStatusChanging(value);
					this.SendPropertyChanging();
					this._ModifiedStatus = value;
					this.SendPropertyChanged("ModifiedStatus");
					this.OnModifiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUserID", DbType="BigInt NOT NULL")]
		public long ModifiedUserID
		{
			get
			{
				return this._ModifiedUserID;
			}
			set
			{
				if ((this._ModifiedUserID != value))
				{
					this.OnModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUserID = value;
					this.SendPropertyChanged("ModifiedUserID");
					this.OnModifiedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamMember", Storage="_TeamMembers", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<TeamMember> TeamMembers
		{
			get
			{
				return this._TeamMembers;
			}
			set
			{
				this._TeamMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamMembers(TeamMember entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamMembers(TeamMember entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamMember")]
	public partial class TeamMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TeamMemberID;
		
		private long _TeamID;
		
		private int _RatingChangeValue;
		
		private int _CurrentRating;
		
		private long _CharacterID;
		
		private int _SpecID;
		
		private int _RaceID;
		
		private bool _FactionID;
		
		private bool _GenderID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedStatus;
		
		private long _ModifiedUserID;
		
		private EntityRef<Character> _Character;
		
		private EntityRef<Faction> _Faction;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<Race> _Race;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Spec> _Spec;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamMemberIDChanging(long value);
    partial void OnTeamMemberIDChanged();
    partial void OnTeamIDChanging(long value);
    partial void OnTeamIDChanged();
    partial void OnRatingChangeValueChanging(int value);
    partial void OnRatingChangeValueChanged();
    partial void OnCurrentRatingChanging(int value);
    partial void OnCurrentRatingChanged();
    partial void OnCharacterIDChanging(long value);
    partial void OnCharacterIDChanged();
    partial void OnSpecIDChanging(int value);
    partial void OnSpecIDChanged();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnFactionIDChanging(bool value);
    partial void OnFactionIDChanged();
    partial void OnGenderIDChanging(bool value);
    partial void OnGenderIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedStatusChanging(string value);
    partial void OnModifiedStatusChanged();
    partial void OnModifiedUserIDChanging(long value);
    partial void OnModifiedUserIDChanged();
    #endregion
		
		public TeamMember()
		{
			this._Character = default(EntityRef<Character>);
			this._Faction = default(EntityRef<Faction>);
			this._Gender = default(EntityRef<Gender>);
			this._Race = default(EntityRef<Race>);
			this._Team = default(EntityRef<Team>);
			this._Spec = default(EntityRef<Spec>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamMemberID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TeamMemberID
		{
			get
			{
				return this._TeamMemberID;
			}
			set
			{
				if ((this._TeamMemberID != value))
				{
					this.OnTeamMemberIDChanging(value);
					this.SendPropertyChanging();
					this._TeamMemberID = value;
					this.SendPropertyChanged("TeamMemberID");
					this.OnTeamMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="BigInt NOT NULL")]
		public long TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingChangeValue", DbType="Int NOT NULL")]
		public int RatingChangeValue
		{
			get
			{
				return this._RatingChangeValue;
			}
			set
			{
				if ((this._RatingChangeValue != value))
				{
					this.OnRatingChangeValueChanging(value);
					this.SendPropertyChanging();
					this._RatingChangeValue = value;
					this.SendPropertyChanged("RatingChangeValue");
					this.OnRatingChangeValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentRating", DbType="Int NOT NULL")]
		public int CurrentRating
		{
			get
			{
				return this._CurrentRating;
			}
			set
			{
				if ((this._CurrentRating != value))
				{
					this.OnCurrentRatingChanging(value);
					this.SendPropertyChanging();
					this._CurrentRating = value;
					this.SendPropertyChanged("CurrentRating");
					this.OnCurrentRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterID", DbType="BigInt NOT NULL")]
		public long CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					if (this._Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecID", DbType="Int NOT NULL")]
		public int SpecID
		{
			get
			{
				return this._SpecID;
			}
			set
			{
				if ((this._SpecID != value))
				{
					if (this._Spec.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecIDChanging(value);
					this.SendPropertyChanging();
					this._SpecID = value;
					this.SendPropertyChanged("SpecID");
					this.OnSpecIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", DbType="Int NOT NULL")]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					if (this._Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactionID", DbType="Bit NOT NULL")]
		public bool FactionID
		{
			get
			{
				return this._FactionID;
			}
			set
			{
				if ((this._FactionID != value))
				{
					if (this._Faction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactionIDChanging(value);
					this.SendPropertyChanging();
					this._FactionID = value;
					this.SendPropertyChanged("FactionID");
					this.OnFactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderID", DbType="Bit NOT NULL")]
		public bool GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedStatus", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ModifiedStatus
		{
			get
			{
				return this._ModifiedStatus;
			}
			set
			{
				if ((this._ModifiedStatus != value))
				{
					this.OnModifiedStatusChanging(value);
					this.SendPropertyChanging();
					this._ModifiedStatus = value;
					this.SendPropertyChanged("ModifiedStatus");
					this.OnModifiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUserID", DbType="BigInt NOT NULL")]
		public long ModifiedUserID
		{
			get
			{
				return this._ModifiedUserID;
			}
			set
			{
				if ((this._ModifiedUserID != value))
				{
					this.OnModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUserID = value;
					this.SendPropertyChanged("ModifiedUserID");
					this.OnModifiedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_TeamMember", Storage="_Character", ThisKey="CharacterID", OtherKey="CharacterID", IsForeignKey=true)]
		public Character Character
		{
			get
			{
				return this._Character.Entity;
			}
			set
			{
				Character previousValue = this._Character.Entity;
				if (((previousValue != value) 
							|| (this._Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character.Entity = null;
						previousValue.TeamMembers.Remove(this);
					}
					this._Character.Entity = value;
					if ((value != null))
					{
						value.TeamMembers.Add(this);
						this._CharacterID = value.CharacterID;
					}
					else
					{
						this._CharacterID = default(long);
					}
					this.SendPropertyChanged("Character");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faction_TeamMember", Storage="_Faction", ThisKey="FactionID", OtherKey="FactionID", IsForeignKey=true)]
		public Faction Faction
		{
			get
			{
				return this._Faction.Entity;
			}
			set
			{
				Faction previousValue = this._Faction.Entity;
				if (((previousValue != value) 
							|| (this._Faction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faction.Entity = null;
						previousValue.TeamMembers.Remove(this);
					}
					this._Faction.Entity = value;
					if ((value != null))
					{
						value.TeamMembers.Add(this);
						this._FactionID = value.FactionID;
					}
					else
					{
						this._FactionID = default(bool);
					}
					this.SendPropertyChanged("Faction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_TeamMember", Storage="_Gender", ThisKey="GenderID", OtherKey="GenderID", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.TeamMembers.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.TeamMembers.Add(this);
						this._GenderID = value.GenderID;
					}
					else
					{
						this._GenderID = default(bool);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Race_TeamMember", Storage="_Race", ThisKey="RaceID", OtherKey="RaceID", IsForeignKey=true)]
		public Race Race
		{
			get
			{
				return this._Race.Entity;
			}
			set
			{
				Race previousValue = this._Race.Entity;
				if (((previousValue != value) 
							|| (this._Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Race.Entity = null;
						previousValue.TeamMembers.Remove(this);
					}
					this._Race.Entity = value;
					if ((value != null))
					{
						value.TeamMembers.Add(this);
						this._RaceID = value.RaceID;
					}
					else
					{
						this._RaceID = default(int);
					}
					this.SendPropertyChanged("Race");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamMember", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamMembers.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamMembers.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(long);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Spec_TeamMember", Storage="_Spec", ThisKey="SpecID", OtherKey="SpecID", IsForeignKey=true)]
		public Spec Spec
		{
			get
			{
				return this._Spec.Entity;
			}
			set
			{
				Spec previousValue = this._Spec.Entity;
				if (((previousValue != value) 
							|| (this._Spec.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Spec.Entity = null;
						previousValue.TeamMembers.Remove(this);
					}
					this._Spec.Entity = value;
					if ((value != null))
					{
						value.TeamMembers.Add(this);
						this._SpecID = value.SpecID;
					}
					else
					{
						this._SpecID = default(int);
					}
					this.SendPropertyChanged("Spec");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private EntitySet<webpages_UsersInRole> _webpages_UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public UserProfile()
		{
			this._webpages_UsersInRoles = new EntitySet<webpages_UsersInRole>(new Action<webpages_UsersInRole>(this.attach_webpages_UsersInRoles), new Action<webpages_UsersInRole>(this.detach_webpages_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(56) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_webpages_UsersInRole", Storage="_webpages_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<webpages_UsersInRole> webpages_UsersInRoles
		{
			get
			{
				return this._webpages_UsersInRoles;
			}
			set
			{
				this._webpages_UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_Membership")]
	public partial class webpages_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _ConfirmationToken;
		
		private System.Nullable<bool> _IsConfirmed;
		
		private System.Nullable<System.DateTime> _LastPasswordFailureDate;
		
		private int _PasswordFailuresSinceLastSuccess;
		
		private string _Password;
		
		private System.Nullable<System.DateTime> _PasswordChangedDate;
		
		private string _PasswordSalt;
		
		private string _PasswordVerificationToken;
		
		private System.Nullable<System.DateTime> _PasswordVerificationTokenExpirationDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnConfirmationTokenChanging(string value);
    partial void OnConfirmationTokenChanged();
    partial void OnIsConfirmedChanging(System.Nullable<bool> value);
    partial void OnIsConfirmedChanged();
    partial void OnLastPasswordFailureDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPasswordFailureDateChanged();
    partial void OnPasswordFailuresSinceLastSuccessChanging(int value);
    partial void OnPasswordFailuresSinceLastSuccessChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordChangedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPasswordChangedDateChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnPasswordVerificationTokenChanging(string value);
    partial void OnPasswordVerificationTokenChanged();
    partial void OnPasswordVerificationTokenExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPasswordVerificationTokenExpirationDateChanged();
    #endregion
		
		public webpages_Membership()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmationToken", DbType="NVarChar(128)")]
		public string ConfirmationToken
		{
			get
			{
				return this._ConfirmationToken;
			}
			set
			{
				if ((this._ConfirmationToken != value))
				{
					this.OnConfirmationTokenChanging(value);
					this.SendPropertyChanging();
					this._ConfirmationToken = value;
					this.SendPropertyChanged("ConfirmationToken");
					this.OnConfirmationTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsConfirmed", DbType="Bit")]
		public System.Nullable<bool> IsConfirmed
		{
			get
			{
				return this._IsConfirmed;
			}
			set
			{
				if ((this._IsConfirmed != value))
				{
					this.OnIsConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsConfirmed = value;
					this.SendPropertyChanged("IsConfirmed");
					this.OnIsConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordFailureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastPasswordFailureDate
		{
			get
			{
				return this._LastPasswordFailureDate;
			}
			set
			{
				if ((this._LastPasswordFailureDate != value))
				{
					this.OnLastPasswordFailureDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordFailureDate = value;
					this.SendPropertyChanged("LastPasswordFailureDate");
					this.OnLastPasswordFailureDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFailuresSinceLastSuccess", DbType="Int NOT NULL")]
		public int PasswordFailuresSinceLastSuccess
		{
			get
			{
				return this._PasswordFailuresSinceLastSuccess;
			}
			set
			{
				if ((this._PasswordFailuresSinceLastSuccess != value))
				{
					this.OnPasswordFailuresSinceLastSuccessChanging(value);
					this.SendPropertyChanging();
					this._PasswordFailuresSinceLastSuccess = value;
					this.SendPropertyChanged("PasswordFailuresSinceLastSuccess");
					this.OnPasswordFailuresSinceLastSuccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordChangedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PasswordChangedDate
		{
			get
			{
				return this._PasswordChangedDate;
			}
			set
			{
				if ((this._PasswordChangedDate != value))
				{
					this.OnPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordChangedDate = value;
					this.SendPropertyChanged("PasswordChangedDate");
					this.OnPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordVerificationToken", DbType="NVarChar(128)")]
		public string PasswordVerificationToken
		{
			get
			{
				return this._PasswordVerificationToken;
			}
			set
			{
				if ((this._PasswordVerificationToken != value))
				{
					this.OnPasswordVerificationTokenChanging(value);
					this.SendPropertyChanging();
					this._PasswordVerificationToken = value;
					this.SendPropertyChanged("PasswordVerificationToken");
					this.OnPasswordVerificationTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordVerificationTokenExpirationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PasswordVerificationTokenExpirationDate
		{
			get
			{
				return this._PasswordVerificationTokenExpirationDate;
			}
			set
			{
				if ((this._PasswordVerificationTokenExpirationDate != value))
				{
					this.OnPasswordVerificationTokenExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordVerificationTokenExpirationDate = value;
					this.SendPropertyChanged("PasswordVerificationTokenExpirationDate");
					this.OnPasswordVerificationTokenExpirationDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_OAuthMembership")]
	public partial class webpages_OAuthMembership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Provider;
		
		private string _ProviderUserId;
		
		private int _UserId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProviderChanging(string value);
    partial void OnProviderChanged();
    partial void OnProviderUserIdChanging(string value);
    partial void OnProviderUserIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public webpages_OAuthMembership()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderUserId", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderUserId
		{
			get
			{
				return this._ProviderUserId;
			}
			set
			{
				if ((this._ProviderUserId != value))
				{
					this.OnProviderUserIdChanging(value);
					this.SendPropertyChanging();
					this._ProviderUserId = value;
					this.SendPropertyChanged("ProviderUserId");
					this.OnProviderUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_Roles")]
	public partial class webpages_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleName;
		
		private EntitySet<webpages_UsersInRole> _webpages_UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public webpages_Role()
		{
			this._webpages_UsersInRoles = new EntitySet<webpages_UsersInRole>(new Action<webpages_UsersInRole>(this.attach_webpages_UsersInRoles), new Action<webpages_UsersInRole>(this.detach_webpages_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="webpages_Role_webpages_UsersInRole", Storage="_webpages_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<webpages_UsersInRole> webpages_UsersInRoles
		{
			get
			{
				return this._webpages_UsersInRoles;
			}
			set
			{
				this._webpages_UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.webpages_Role = this;
		}
		
		private void detach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.webpages_Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Realm")]
	public partial class Realm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RealmID;
		
		private string _Name;
		
		private int _RegionID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedStatus;
		
		private long _ModifiedUserID;
		
		private EntitySet<Character> _Characters;
		
		private EntityRef<Region> _Region;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRealmIDChanging(int value);
    partial void OnRealmIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedStatusChanging(string value);
    partial void OnModifiedStatusChanged();
    partial void OnModifiedUserIDChanging(long value);
    partial void OnModifiedUserIDChanged();
    #endregion
		
		public Realm()
		{
			this._Characters = new EntitySet<Character>(new Action<Character>(this.attach_Characters), new Action<Character>(this.detach_Characters));
			this._Region = default(EntityRef<Region>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealmID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RealmID
		{
			get
			{
				return this._RealmID;
			}
			set
			{
				if ((this._RealmID != value))
				{
					this.OnRealmIDChanging(value);
					this.SendPropertyChanging();
					this._RealmID = value;
					this.SendPropertyChanged("RealmID");
					this.OnRealmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedStatus", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ModifiedStatus
		{
			get
			{
				return this._ModifiedStatus;
			}
			set
			{
				if ((this._ModifiedStatus != value))
				{
					this.OnModifiedStatusChanging(value);
					this.SendPropertyChanging();
					this._ModifiedStatus = value;
					this.SendPropertyChanged("ModifiedStatus");
					this.OnModifiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUserID", DbType="BigInt NOT NULL")]
		public long ModifiedUserID
		{
			get
			{
				return this._ModifiedUserID;
			}
			set
			{
				if ((this._ModifiedUserID != value))
				{
					this.OnModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUserID = value;
					this.SendPropertyChanged("ModifiedUserID");
					this.OnModifiedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Realm_Character", Storage="_Characters", ThisKey="RealmID", OtherKey="RealmID")]
		public EntitySet<Character> Characters
		{
			get
			{
				return this._Characters;
			}
			set
			{
				this._Characters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Realm", Storage="_Region", ThisKey="RegionID", OtherKey="RegionID", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.Realms.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.Realms.Add(this);
						this._RegionID = value.RegionID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Realm = this;
		}
		
		private void detach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Realm = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Spec")]
	public partial class Spec : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecID;
		
		private string _SpecName;
		
		private string _BlizzName;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedStatus;
		
		private long _ModifiedUserID;
		
		private EntitySet<Character> _Characters;
		
		private EntitySet<TeamMember> _TeamMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecIDChanging(int value);
    partial void OnSpecIDChanged();
    partial void OnSpecNameChanging(string value);
    partial void OnSpecNameChanged();
    partial void OnBlizzNameChanging(string value);
    partial void OnBlizzNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedStatusChanging(string value);
    partial void OnModifiedStatusChanged();
    partial void OnModifiedUserIDChanging(long value);
    partial void OnModifiedUserIDChanged();
    #endregion
		
		public Spec()
		{
			this._Characters = new EntitySet<Character>(new Action<Character>(this.attach_Characters), new Action<Character>(this.detach_Characters));
			this._TeamMembers = new EntitySet<TeamMember>(new Action<TeamMember>(this.attach_TeamMembers), new Action<TeamMember>(this.detach_TeamMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecID
		{
			get
			{
				return this._SpecID;
			}
			set
			{
				if ((this._SpecID != value))
				{
					this.OnSpecIDChanging(value);
					this.SendPropertyChanging();
					this._SpecID = value;
					this.SendPropertyChanged("SpecID");
					this.OnSpecIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SpecName
		{
			get
			{
				return this._SpecName;
			}
			set
			{
				if ((this._SpecName != value))
				{
					this.OnSpecNameChanging(value);
					this.SendPropertyChanging();
					this._SpecName = value;
					this.SendPropertyChanged("SpecName");
					this.OnSpecNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlizzName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BlizzName
		{
			get
			{
				return this._BlizzName;
			}
			set
			{
				if ((this._BlizzName != value))
				{
					this.OnBlizzNameChanging(value);
					this.SendPropertyChanging();
					this._BlizzName = value;
					this.SendPropertyChanged("BlizzName");
					this.OnBlizzNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedStatus", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ModifiedStatus
		{
			get
			{
				return this._ModifiedStatus;
			}
			set
			{
				if ((this._ModifiedStatus != value))
				{
					this.OnModifiedStatusChanging(value);
					this.SendPropertyChanging();
					this._ModifiedStatus = value;
					this.SendPropertyChanged("ModifiedStatus");
					this.OnModifiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUserID", DbType="BigInt NOT NULL")]
		public long ModifiedUserID
		{
			get
			{
				return this._ModifiedUserID;
			}
			set
			{
				if ((this._ModifiedUserID != value))
				{
					this.OnModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUserID = value;
					this.SendPropertyChanged("ModifiedUserID");
					this.OnModifiedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Spec_Character", Storage="_Characters", ThisKey="SpecID", OtherKey="SpecID")]
		public EntitySet<Character> Characters
		{
			get
			{
				return this._Characters;
			}
			set
			{
				this._Characters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Spec_TeamMember", Storage="_TeamMembers", ThisKey="SpecID", OtherKey="SpecID")]
		public EntitySet<TeamMember> TeamMembers
		{
			get
			{
				return this._TeamMembers;
			}
			set
			{
				this._TeamMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Spec = this;
		}
		
		private void detach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Spec = null;
		}
		
		private void attach_TeamMembers(TeamMember entity)
		{
			this.SendPropertyChanging();
			entity.Spec = this;
		}
		
		private void detach_TeamMembers(TeamMember entity)
		{
			this.SendPropertyChanging();
			entity.Spec = null;
		}
	}
	
	public partial class SP_GetAllTeamsByClassCompositionThenOrderThemByMostPopularResult
	{
		
		private long _TeamID;
		
		private string _Name;
		
		private string _BlizzName;
		
		private string _Bracket;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<bool> _FactionID;
		
		public SP_GetAllTeamsByClassCompositionThenOrderThemByMostPopularResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="BigInt NOT NULL")]
		public long TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this._TeamID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlizzName", DbType="NVarChar(50)")]
		public string BlizzName
		{
			get
			{
				return this._BlizzName;
			}
			set
			{
				if ((this._BlizzName != value))
				{
					this._BlizzName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bracket", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Bracket
		{
			get
			{
				return this._Bracket;
			}
			set
			{
				if ((this._Bracket != value))
				{
					this._Bracket = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this._ModifiedDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactionID", DbType="Bit")]
		public System.Nullable<bool> FactionID
		{
			get
			{
				return this._FactionID;
			}
			set
			{
				if ((this._FactionID != value))
				{
					this._FactionID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
